<!DOCTYPE html>
<html class="staticrypt-html">
    <head>
        <meta charset="utf-8" />
        <title>Vizualizare editie</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />

        <!-- do not cache this page -->
        <meta http-equiv="cache-control" content="max-age=0" />
        <meta http-equiv="cache-control" content="no-cache" />
        <meta http-equiv="expires" content="0" />
        <meta http-equiv="expires" content="Tue, 01 Jan 1980 1:00:00 GMT" />
        <meta http-equiv="pragma" content="no-cache" />

        <style>
            .staticrypt-hr {
                margin-top: 20px;
                margin-bottom: 20px;
                border: 0;
                border-top: 1px solid #eee;
            }

            .staticrypt-page {
                width: 360px;
                padding: 8% 0 0;
                margin: auto;
                box-sizing: border-box;
            }

            .staticrypt-form {
                position: relative;
                z-index: 1;
                background: #ffffff;
                max-width: 360px;
                margin: 0 auto 100px;
                padding: 45px;
                text-align: center;
                box-shadow: 0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24);
            }

            .staticrypt-form input[type="password"] {
                outline: 0;
                background: #f2f2f2;
                width: 100%;
                border: 0;
                margin: 0 0 15px;
                padding: 15px;
                box-sizing: border-box;
                font-size: 14px;
            }

            .staticrypt-form .staticrypt-decrypt-button {
                text-transform: uppercase;
                outline: 0;
                background: #FA904B;
                width: 100%;
                border: 0;
                padding: 15px;
                color: #ffffff;
                font-size: 14px;
                cursor: pointer;
            }

            .staticrypt-form .staticrypt-decrypt-button:hover,
            .staticrypt-form .staticrypt-decrypt-button:active,
            .staticrypt-form .staticrypt-decrypt-button:focus {
                background: #FA904B;
                filter: brightness(92%);
            }

            .staticrypt-html {
                height: 100%;
            }

            .staticrypt-body {
                height: 100%;
                margin: 0;
            }

            .staticrypt-content {
                height: 100%;
                margin-bottom: 1em;
                background: #ECCCC5;
                font-family: "Arial", sans-serif;
                -webkit-font-smoothing: antialiased;
                -moz-osx-font-smoothing: grayscale;
            }

            .staticrypt-instructions {
                margin-top: -1em;
                margin-bottom: 1em;
            }

            .staticrypt-title {
                font-size: 1.5em;
            }

            label.staticrypt-remember {
                display: flex;
                align-items: center;
                margin-bottom: 1em;
            }

            .staticrypt-remember input[type="checkbox"] {
                transform: scale(1.5);
                margin-right: 1em;
            }

            .hidden {
                display: none !important;
            }

            .staticrypt-spinner-container {
                height: 100%;
                display: flex;
                align-items: center;
                justify-content: center;
            }

            .staticrypt-spinner {
                display: inline-block;
                width: 2rem;
                height: 2rem;
                vertical-align: text-bottom;
                border: 0.25em solid gray;
                border-right-color: transparent;
                border-radius: 50%;
                -webkit-animation: spinner-border 0.75s linear infinite;
                animation: spinner-border 0.75s linear infinite;
                animation-duration: 0.75s;
                animation-timing-function: linear;
                animation-delay: 0s;
                animation-iteration-count: infinite;
                animation-direction: normal;
                animation-fill-mode: none;
                animation-play-state: running;
                animation-name: spinner-border;
            }

            @keyframes spinner-border {
                100% {
                    transform: rotate(360deg);
                }
            }
        </style>
    </head>

    <body class="staticrypt-body">
        <div id="staticrypt_loading" class="staticrypt-spinner-container">
            <div class="staticrypt-spinner"></div>
        </div>

        <div id="staticrypt_content" class="staticrypt-content hidden">
            <div class="staticrypt-page">
                <div class="staticrypt-form">
                    <div class="staticrypt-instructions">
                        <p class="staticrypt-title">Vizualizare editie</p>
                        <p><p>Detalii editii jucate, au acces doar membri Takeaway Soccer 2024.</p>
</p>
                    </div>

                    <hr class="staticrypt-hr" />

                    <form id="staticrypt-form" action="#" method="post">
                        <input
                            id="staticrypt-password"
                            type="password"
                            name="password"
                            placeholder="Parola"
                            autofocus
                        />

                        <label id="staticrypt-remember-label" class="staticrypt-remember hidden">
                            <input id="staticrypt-remember" type="checkbox" name="remember" />
                            Apasa aici sa nu mai fii nevoit sa adaugi parola.
                        </label>

                        <input type="submit" class="staticrypt-decrypt-button" value="DECRYPT" />
                    </form>
                </div>
            </div>
        </div>

        <script>
            // these variables will be filled when generating the file - the template format is 'variable_name'
            const staticryptInitiator = 
            ((function(){
  const exports = {};
  const cryptoEngine = ((function(){
  const exports = {};
  const { subtle } = crypto;

const IV_BITS = 16 * 8;
const HEX_BITS = 4;
const ENCRYPTION_ALGO = "AES-CBC";

/**
 * Translates between utf8 encoded hexadecimal strings
 * and Uint8Array bytes.
 */
const HexEncoder = {
    /**
     * hex string -> bytes
     * @param {string} hexString
     * @returns {Uint8Array}
     */
    parse: function (hexString) {
        if (hexString.length % 2 !== 0) throw "Invalid hexString";
        const arrayBuffer = new Uint8Array(hexString.length / 2);

        for (let i = 0; i < hexString.length; i += 2) {
            const byteValue = parseInt(hexString.substring(i, i + 2), 16);
            if (isNaN(byteValue)) {
                throw "Invalid hexString";
            }
            arrayBuffer[i / 2] = byteValue;
        }
        return arrayBuffer;
    },

    /**
     * bytes -> hex string
     * @param {Uint8Array} bytes
     * @returns {string}
     */
    stringify: function (bytes) {
        const hexBytes = [];

        for (let i = 0; i < bytes.length; ++i) {
            let byteString = bytes[i].toString(16);
            if (byteString.length < 2) {
                byteString = "0" + byteString;
            }
            hexBytes.push(byteString);
        }
        return hexBytes.join("");
    },
};

/**
 * Translates between utf8 strings and Uint8Array bytes.
 */
const UTF8Encoder = {
    parse: function (str) {
        return new TextEncoder().encode(str);
    },

    stringify: function (bytes) {
        return new TextDecoder().decode(bytes);
    },
};

/**
 * Salt and encrypt a msg with a password.
 */
async function encrypt(msg, hashedPassword) {
    // Must be 16 bytes, unpredictable, and preferably cryptographically random. However, it need not be secret.
    // https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/encrypt#parameters
    const iv = crypto.getRandomValues(new Uint8Array(IV_BITS / 8));

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["encrypt"]);

    const encrypted = await subtle.encrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        UTF8Encoder.parse(msg)
    );

    // iv will be 32 hex characters, we prepend it to the ciphertext for use in decryption
    return HexEncoder.stringify(iv) + HexEncoder.stringify(new Uint8Array(encrypted));
}
exports.encrypt = encrypt;

/**
 * Decrypt a salted msg using a password.
 *
 * @param {string} encryptedMsg
 * @param {string} hashedPassword
 * @returns {Promise<string>}
 */
async function decrypt(encryptedMsg, hashedPassword) {
    const ivLength = IV_BITS / HEX_BITS;
    const iv = HexEncoder.parse(encryptedMsg.substring(0, ivLength));
    const encrypted = encryptedMsg.substring(ivLength);

    const key = await subtle.importKey("raw", HexEncoder.parse(hashedPassword), ENCRYPTION_ALGO, false, ["decrypt"]);

    const outBuffer = await subtle.decrypt(
        {
            name: ENCRYPTION_ALGO,
            iv: iv,
        },
        key,
        HexEncoder.parse(encrypted)
    );

    return UTF8Encoder.stringify(new Uint8Array(outBuffer));
}
exports.decrypt = decrypt;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
async function hashPassword(password, salt) {
    // we hash the password in multiple steps, each adding more iterations. This is because we used to allow less
    // iterations, so for backward compatibility reasons, we need to support going from that to more iterations.
    let hashedPassword = await hashLegacyRound(password, salt);

    hashedPassword = await hashSecondRound(hashedPassword, salt);

    return hashThirdRound(hashedPassword, salt);
}
exports.hashPassword = hashPassword;

/**
 * This hashes the password with 1k iterations. This is a low number, we need this function to support backwards
 * compatibility.
 *
 * @param {string} password
 * @param {string} salt
 * @returns {Promise<string>}
 */
function hashLegacyRound(password, salt) {
    return pbkdf2(password, salt, 1000, "SHA-1");
}
exports.hashLegacyRound = hashLegacyRound;

/**
 * Add a second round of iterations. This is because we used to use 1k, so for backwards compatibility with
 * remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashSecondRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 14000, "SHA-256");
}
exports.hashSecondRound = hashSecondRound;

/**
 * Add a third round of iterations to bring total number to 600k. This is because we used to use 1k, then 15k, so for
 * backwards compatibility with remember-me/autodecrypt links, we need to support going from that to more iterations.
 *
 * @param hashedPassword
 * @param salt
 * @returns {Promise<string>}
 */
function hashThirdRound(hashedPassword, salt) {
    return pbkdf2(hashedPassword, salt, 585000, "SHA-256");
}
exports.hashThirdRound = hashThirdRound;

/**
 * Salt and hash the password so it can be stored in localStorage without opening a password reuse vulnerability.
 *
 * @param {string} password
 * @param {string} salt
 * @param {int} iterations
 * @param {string} hashAlgorithm
 * @returns {Promise<string>}
 */
async function pbkdf2(password, salt, iterations, hashAlgorithm) {
    const key = await subtle.importKey("raw", UTF8Encoder.parse(password), "PBKDF2", false, ["deriveBits"]);

    const keyBytes = await subtle.deriveBits(
        {
            name: "PBKDF2",
            hash: hashAlgorithm,
            iterations,
            salt: UTF8Encoder.parse(salt),
        },
        key,
        256
    );

    return HexEncoder.stringify(new Uint8Array(keyBytes));
}

function generateRandomSalt() {
    const bytes = crypto.getRandomValues(new Uint8Array(128 / 8));

    return HexEncoder.stringify(new Uint8Array(bytes));
}
exports.generateRandomSalt = generateRandomSalt;

async function signMessage(hashedPassword, message) {
    const key = await subtle.importKey(
        "raw",
        HexEncoder.parse(hashedPassword),
        {
            name: "HMAC",
            hash: "SHA-256",
        },
        false,
        ["sign"]
    );
    const signature = await subtle.sign("HMAC", key, UTF8Encoder.parse(message));

    return HexEncoder.stringify(new Uint8Array(signature));
}
exports.signMessage = signMessage;

function getRandomAlphanum() {
    const possibleCharacters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

    let byteArray;
    let parsedInt;

    // Keep generating new random bytes until we get a value that falls
    // within a range that can be evenly divided by possibleCharacters.length
    do {
        byteArray = crypto.getRandomValues(new Uint8Array(1));
        // extract the lowest byte to get an int from 0 to 255 (probably unnecessary, since we're only generating 1 byte)
        parsedInt = byteArray[0] & 0xff;
    } while (parsedInt >= 256 - (256 % possibleCharacters.length));

    // Take the modulo of the parsed integer to get a random number between 0 and totalLength - 1
    const randomIndex = parsedInt % possibleCharacters.length;

    return possibleCharacters[randomIndex];
}

/**
 * Generate a random string of a given length.
 *
 * @param {int} length
 * @returns {string}
 */
function generateRandomString(length) {
    let randomString = "";

    for (let i = 0; i < length; i++) {
        randomString += getRandomAlphanum();
    }

    return randomString;
}
exports.generateRandomString = generateRandomString;

  return exports;
})());
const codec = ((function(){
  const exports = {};
  /**
 * Initialize the codec with the provided cryptoEngine - this return functions to encode and decode messages.
 *
 * @param cryptoEngine - the engine to use for encryption / decryption
 */
function init(cryptoEngine) {
    const exports = {};

    /**
     * Top-level function for encoding a message.
     * Includes password hashing, encryption, and signing.
     *
     * @param {string} msg
     * @param {string} password
     * @param {string} salt
     *
     * @returns {string} The encoded text
     */
    async function encode(msg, password, salt) {
        const hashedPassword = await cryptoEngine.hashPassword(password, salt);

        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encode = encode;

    /**
     * Encode using a password that has already been hashed. This is useful to encode multiple messages in a row, that way
     * we don't need to hash the password multiple times.
     *
     * @param {string} msg
     * @param {string} hashedPassword
     *
     * @returns {string} The encoded text
     */
    async function encodeWithHashedPassword(msg, hashedPassword) {
        const encrypted = await cryptoEngine.encrypt(msg, hashedPassword);

        // we use the hashed password in the HMAC because this is effectively what will be used a password (so we can store
        // it in localStorage safely, we don't use the clear text password)
        const hmac = await cryptoEngine.signMessage(hashedPassword, encrypted);

        return hmac + encrypted;
    }
    exports.encodeWithHashedPassword = encodeWithHashedPassword;

    /**
     * Top-level function for decoding a message.
     * Includes signature check and decryption.
     *
     * @param {string} signedMsg
     * @param {string} hashedPassword
     * @param {string} salt
     * @param {int} backwardCompatibleAttempt
     * @param {string} originalPassword
     *
     * @returns {Object} {success: true, decoded: string} | {success: false, message: string}
     */
    async function decode(signedMsg, hashedPassword, salt, backwardCompatibleAttempt = 0, originalPassword = "") {
        const encryptedHMAC = signedMsg.substring(0, 64);
        const encryptedMsg = signedMsg.substring(64);
        const decryptedHMAC = await cryptoEngine.signMessage(hashedPassword, encryptedMsg);

        if (decryptedHMAC !== encryptedHMAC) {
            // we have been raising the number of iterations in the hashing algorithm multiple times, so to support the old
            // remember-me/autodecrypt links we need to try bringing the old hashes up to speed.
            originalPassword = originalPassword || hashedPassword;
            if (backwardCompatibleAttempt === 0) {
                const updatedHashedPassword = await cryptoEngine.hashThirdRound(originalPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }
            if (backwardCompatibleAttempt === 1) {
                let updatedHashedPassword = await cryptoEngine.hashSecondRound(originalPassword, salt);
                updatedHashedPassword = await cryptoEngine.hashThirdRound(updatedHashedPassword, salt);

                return decode(signedMsg, updatedHashedPassword, salt, backwardCompatibleAttempt + 1, originalPassword);
            }

            return { success: false, message: "Signature mismatch" };
        }

        return {
            success: true,
            decoded: await cryptoEngine.decrypt(encryptedMsg, hashedPassword),
        };
    }
    exports.decode = decode;

    return exports;
}
exports.init = init;

  return exports;
})());
const decode = codec.init(cryptoEngine).decode;

/**
 * Initialize the staticrypt module, that exposes functions callbable by the password_template.
 *
 * @param {{
 *  staticryptEncryptedMsgUniqueVariableName: string,
 *  isRememberEnabled: boolean,
 *  rememberDurationInDays: number,
 *  staticryptSaltUniqueVariableName: string,
 * }} staticryptConfig - object of data that is stored on the password_template at encryption time.
 *
 * @param {{
 *  rememberExpirationKey: string,
 *  rememberPassphraseKey: string,
 *  replaceHtmlCallback: function,
 *  clearLocalStorageCallback: function,
 * }} templateConfig - object of data that can be configured by a custom password_template.
 */
function init(staticryptConfig, templateConfig) {
    const exports = {};

    /**
     * Decrypt our encrypted page, replace the whole HTML.
     *
     * @param {string} hashedPassword
     * @returns {Promise<boolean>}
     */
    async function decryptAndReplaceHtml(hashedPassword) {
        const { staticryptEncryptedMsgUniqueVariableName, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { replaceHtmlCallback } = templateConfig;

        const result = await decode(
            staticryptEncryptedMsgUniqueVariableName,
            hashedPassword,
            staticryptSaltUniqueVariableName
        );
        if (!result.success) {
            return false;
        }
        const plainHTML = result.decoded;

        // if the user configured a callback call it, otherwise just replace the whole HTML
        if (typeof replaceHtmlCallback === "function") {
            replaceHtmlCallback(plainHTML);
        } else {
            document.write(plainHTML);
            document.close();
        }

        return true;
    }

    /**
     * Attempt to decrypt the page and replace the whole HTML.
     *
     * @param {string} password
     * @param {boolean} isRememberChecked
     *
     * @returns {Promise<{isSuccessful: boolean, hashedPassword?: string}>} - we return an object, so that if we want to
     *   expose more information in the future we can do it without breaking the password_template
     */
    async function handleDecryptionOfPage(password, isRememberChecked) {
        const { isRememberEnabled, rememberDurationInDays, staticryptSaltUniqueVariableName } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // decrypt and replace the whole page
        const hashedPassword = await cryptoEngine.hashPassword(password, staticryptSaltUniqueVariableName);

        const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

        if (!isDecryptionSuccessful) {
            return {
                isSuccessful: false,
                hashedPassword,
            };
        }

        // remember the hashedPassword and set its expiration if necessary
        if (isRememberEnabled && isRememberChecked) {
            window.localStorage.setItem(rememberPassphraseKey, hashedPassword);

            // set the expiration if the duration isn't 0 (meaning no expiration)
            if (rememberDurationInDays > 0) {
                window.localStorage.setItem(
                    rememberExpirationKey,
                    (new Date().getTime() + rememberDurationInDays * 24 * 60 * 60 * 1000).toString()
                );
            }
        }

        return {
            isSuccessful: true,
            hashedPassword,
        };
    }
    exports.handleDecryptionOfPage = handleDecryptionOfPage;

    /**
     * Clear localstorage from staticrypt related values
     */
    function clearLocalStorage() {
        const { clearLocalStorageCallback, rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        if (typeof clearLocalStorageCallback === "function") {
            clearLocalStorageCallback();
        } else {
            localStorage.removeItem(rememberPassphraseKey);
            localStorage.removeItem(rememberExpirationKey);
        }
    }

    async function handleDecryptOnLoad() {
        let isSuccessful = await decryptOnLoadFromUrl();

        if (!isSuccessful) {
            isSuccessful = await decryptOnLoadFromRememberMe();
        }

        return { isSuccessful };
    }
    exports.handleDecryptOnLoad = handleDecryptOnLoad;

    /**
     * Clear storage if we are logging out
     *
     * @returns {boolean} - whether we logged out
     */
    function logoutIfNeeded() {
        const logoutKey = "staticrypt_logout";

        // handle logout through query param
        const queryParams = new URLSearchParams(window.location.search);
        if (queryParams.has(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        // handle logout through URL fragment
        const hash = window.location.hash.substring(1);
        if (hash.includes(logoutKey)) {
            clearLocalStorage();
            return true;
        }

        return false;
    }

    /**
     * To be called on load: check if we want to try to decrypt and replace the HTML with the decrypted content, and
     * try to do it if needed.
     *
     * @returns {Promise<boolean>} true if we derypted and replaced the whole page, false otherwise
     */
    async function decryptOnLoadFromRememberMe() {
        const { rememberDurationInDays } = staticryptConfig;
        const { rememberExpirationKey, rememberPassphraseKey } = templateConfig;

        // if we are login out, terminate
        if (logoutIfNeeded()) {
            return false;
        }

        // if there is expiration configured, check if we're not beyond the expiration
        if (rememberDurationInDays && rememberDurationInDays > 0) {
            const expiration = localStorage.getItem(rememberExpirationKey),
                isExpired = expiration && new Date().getTime() > parseInt(expiration);

            if (isExpired) {
                clearLocalStorage();
                return false;
            }
        }

        const hashedPassword = localStorage.getItem(rememberPassphraseKey);

        if (hashedPassword) {
            // try to decrypt
            const isDecryptionSuccessful = await decryptAndReplaceHtml(hashedPassword);

            // if the decryption is unsuccessful the password might be wrong - silently clear the saved data and let
            // the user fill the password form again
            if (!isDecryptionSuccessful) {
                clearLocalStorage();
                return false;
            }

            return true;
        }

        return false;
    }

    function decryptOnLoadFromUrl() {
        const passwordKey = "staticrypt_pwd";

        // get the password from the query param
        const queryParams = new URLSearchParams(window.location.search);
        const hashedPasswordQuery = queryParams.get(passwordKey);

        // get the password from the url fragment
        const hashRegexMatch = window.location.hash.substring(1).match(new RegExp(passwordKey + "=(.*)"));
        const hashedPasswordFragment = hashRegexMatch ? hashRegexMatch[1] : null;

        const hashedPassword = hashedPasswordFragment || hashedPasswordQuery;

        if (hashedPassword) {
            return decryptAndReplaceHtml(hashedPassword);
        }

        return false;
    }

    return exports;
}
exports.init = init;

  return exports;
})());
        ;
            const templateError = "template_error",
                isRememberEnabled = true,
                staticryptConfig = {"staticryptEncryptedMsgUniqueVariableName":"3d6b9e5d523dd9e2b8f9a873b3173eec3c89a0c32338b00edf18a00da4e53ca5720f0aa33e9811e80053af7407a2bde00f770400778d0ad506e5dc9ad4532743805eb8eaa96dc335aeb27f7638a583ab22593062cb2c169b71872b78277fd7c51d51d0fc83fa41a8736c1ca59258f8c6969a63b959ff3f23505ccf8b9cf744f980fd5e12b3da21cc73091e295f20a6465344390a7b6a4aecaedf99b2d20f38e90870f88ad432f7910ef6ac21be141091c906e1c592a4f1453e7401b0a9fb472b3de0b7c827b852c04ceb06d8ab0718302ab62cd757f5141d08c912173a82b75429fa130b5756408bc44571dc1dd667c2b11e023cc59f5bd18fc2e53d8fc704e303ab5d643f1abbbc4b15f0a8c38ed992fdbdf0682254d8f6a84e846fdb7f21958219e9e1898062b04279595112383eab7abae60d1de991dbef7fc93359c61ec58bb5745d7757ae101adf78d9f0813452e4806d87b9b07e80dfb221ca10001d6400a543fa0e3e3c23e3edb2c52edad979a0ead79e101aa7b58cdbae955bdd860eed9c19742c71ea159db8ce443faf74aee491763d9617abafc513e81ec9b084b2bc784e2f19830a0944c4939bc242e17afba05cd4205c5e3e3274e6b01ac371255a9ab2a5cf4c20ea93acbd0ee02dfb6b3275428f89c86da507349699da453d19a6d38534ef7cd2ca7bd30836b811867a6c1b14758eab39032d65e2ea72db16ee4fb476a078c870dd03987360d9a8ce3e33ee9a1806d2b7961af4145d17fb5cda426c1a74a01a6986f9bd602e9b316a80219f1d8ab01c1540792c63802c8da7c7c0fa37e0ec39298ee19025c27629bb1fb226c843cc1f49eaba87729c10b2cf3f3b131414fea3b8538e35dc46392ff55fc3ea85f0d582fd4c29b4de289037dd0afd92d0e35013b7a0050d07260584eeab45a10f76a2ee7e76d85fb56670ea6b7ebd9e6ab3c7118844b218a117bdd1e77e2630d597e5627786562788e4e7e01cc34e6a84a057c51df14ba0d94eefd3da09841a1415617db5d06e79abb0ef7d1fa9c5fc73c78f65c73e079d77d80abd5664377754bb4fe69c804afd5d689c63a813476ddfa61283a2a0d9bfd10dd1641886aef272b25716da3145d928e903def2dc08c397a10f289bb45e33d7375cdf8af5c5df532165299dd6b0df0149d5473fd26e4bc6c4476791868e651fdaedcdbf39551b44add675321f4deed6e1bde4c6ad9eb802468f54dcd654015386a75274ee99fe14607d114405f46ca1fb74a4fa6aaac629b077b90f965fe3a9c44f2968a15acb5e23e7081db6f18176b7556a560bb9a69b6f79aff2effe59e54f6e920dea75648edebb045ed9c49de8c78743e41b7ffd1eb10cdf33d270b8cc0ad9fa3ad3cf82eba1e0423d222e462b40c4bfdfcf1427b9814f9ff8d804d38cea596df81173c63f5c311daac30475a045309114c1b03b52ca7291f2c12d8baceec0dbf74f9f5794ac92c1f20ced8677cd6a6981f3ae568aa643a4591b96b40b3515c3cfe44f31cd61c8344036c64923f3a3ed784660984944bb0c75f8621e71054e9565518c2ff1f4045eb43e1d5530384b168b8375ec733ad6486f505ea2b6b4cd733f78a59f2bf060c1c72a2d6330fc8a93f7344187cb71fb4b239ff7a3335b4691cedaa2072d4de873d8b0b066eb6f8ce704ea96fa3cd490d2b33387df3e328a21443007aac40894464dc196d8c7fc3c9c671d5943d28e44a20c7c243b52d13d81c3e798e26b63a9f8e272f977b1571cf4f8892e7970d89b8bb05400fdd219bf8e96aefcddf63d3333aad1468a803fe6e95c06bd2bebb185865000366bbc7d63125a70e2bc258d3850312d2a867faa3a49062e5970d27ef51cd1dfcacb9e71110b094e2ea1b30386434232ec271bb271d14aa99803297ac5167bb8e214d375771fc3dfcf9d7bd3bbc031d1c85612f179af7747e96e8df28255f28ce0dd65367da5a10c18a8d620d1e29eb775f64119cc990d59ef9d2aef2e351dd2231fe5e4f43732d96dda9411c751128e39c2713ee2f979eb9b38ac82e6d3fa39f948ebceb2bc6bbe6d46e36edcb72940eaa5ff00507f75640233f1d10ef7281f1b2ad4ecc78752f3868e89335ba816990f8ef4fa727c468ad5b18c910523670750a04b7983710be61b3886233b3b82de4de92034b0a167d7b0d812e4461b1082e7b59696822cbcddebd4e38c27eec115438a9e3d7e7a11d258d4f344045aaa7b5b69498af51b6e55d68ff164d4cb5d57519fe1478f581e314cda58cfbb0fbf7ce7f2d969b92a72784e2aff70934eba044fd3674a527fad6647822005786d912e62c730340100a061c6b5c7b3cbe453db82503ddaa1b4591edf53f9683cc7747e6aa5ff3644204f20ba29b9a394e0044258aa992a0e8082fe9a8460bddc8c89850a858baccf49fd8f25d6cf9ec85b6bab44e4630e1db84f2e2918aa998fd361bbed1763fc38301f6c3661769cc9bf87d3c52b0a761a3b4b412e0a4a761472973126d2071d74cda1b6557f958a904ee1fac3ccb75afa514b4f45a216bdd28b5483492cad3b1f89e30d52e8e1527dba1ada9ffaf9dd0673cc68cbb506df08bacf6d68b3ced7ae5fdbbebbea2b30a1773d298ce07ec44fe526f0e4708d3d67a8730ac03da77e7bac7a19328e4d26425a5b481fdf6b4729e36315eda82c7c04431100bc4c5e8550d9068ff60cd40cfe07ad20c57be3e29407cd24af164f4458132346d1841a7eec1d58b790851b9d8c683acde2c733e1eb59a1d9f1497a73446acc1e1ea70690589be679ddfd8cf084a264dcb7020f5d5e0bccabe10128d111460e3ebcf69be0b045d175daf070944dc2804881129e0e979c46f61cd957d3ef2a2fb20429049984dbd94dc0f331e0555cf7214dc03433329d32b5953c9d514477ba665107455b93fadd773ae38f6ccbb6491d177f7c9555189f6d3b5e89a2427aa800a39a6d78cbfdc1f6864b198a156bb6d4e55d76da4e839b8299d44811ff0041bc77e576aaf380069fcc8453f2daf5b5cf99973695a2241ef602caec7ebfd6c0417c918fd76997a2085d7b9eed88bc84bdf215e2a75095652e625841e41dd80ac8d0d789a08d916fda6cb03c12e219b98f7ee78c2cded85b6596936cdf0d4051cd72f327bf34fedd272aa3327f2a2f0b2c1c0a6bd6f20e8548f57182c6ebd1e238cfb255fe8db371a18d07bb6c39d148cf6ca5c913764f5142b11fb88deb4f201c54751dbe57b5c7569e345e26d010966c880db58ff3b70e36ed316a87827271db97d0a71a45a4d6151984ebd307dd417408ce4f9de67b18cfe5a44a1d6f76b5717050b690c65645a96a328310bd2c175f01242b23c74b3ac18652e29ae8afa5110b6a545d5ef36937ec276942526f1acac7647968219f0079ac8b76dc7ad1152e2bfefae9c3f6b1b6aae0b743c88f72c2f3283f81fecf378a05c9003595be3a4358588d60a97dbe2b7c73a3ee50fa59130113d5579910bc3586b4c2007f48297d5a324ddc49f263c8995f14029da045bcda9bd94b10b258324f72442084d711639f03d1831226b172fd024db01555911dc9f9db9514b0e334db2310d7ec72e43c3d3d55b24b21099b29cb352cfa321416d76830f2f8692b3d44b68a5c7bf03910b853f4410110df63ed9b3c7e3b69d3f2767c431cf06a0d0581f3cbc1848630e9966b24735564a016dafb766abeb662de97a67bb1b531fd391f40dca3564c4bbdff27b82da682674a3b22e62e6d61f8c451643e5348380e15193464763efa762f376d1dbd99f4765e9cd2c82b84e0fa7ab3860d9d5cbd16830f2b7720d5096f57e6b7204c07bbcb0b0925fdf47769363dbf7242a879089d2bcff3c785d0895b413afffdd2c01f77a5ba1be888715405a67b65dbc50f287e4f67075e066685f544ccb456b205b99846499d3c24833eb3238761fd8887cacb4047080b5517123f0bc04d3efb3b6809258c740ad3b73c76cd48cea74a04b1de9b30a8481ff83ad226b5b617ea9e701d01a916e7e977c350890c62efaa1b36f560c4783f8ac238d290b4357650e81a17c60a6544c3077c203fa2007eacb262d5b5da30525fa9d9ec2381362d768c99b66e330f9d3880b57008e56c4f5d6f90396fd2009f72ba0953f6cbce5711fd1335816fc5e3ede07e4dd5c5043f41b3949530076e4080567d16a6b1ca4aa9e19e7b948bae6465eb4f01a3d0af4d71c8991c57f306837b2440bbc8368a91d6bd7b03a18887b5d15b677738224aaa609a6c54139bbf68e6d0bd22804f5c8671fbad62332160c2483183049187c9f8ea4b8ca6fb60a416c0beca4ab072a49130215ea24a6f3c9dbf6a5c401b82415cf268e6d5dfdc54c866e22ce6b71b11b1c0f8e8100990f3999e4ddbad141e60a42585876d61ef7a09ae783c0f5c7a905863cb519f8b63bf34ac42f8dcc4fd8b647ba938d14fb3119bb945936eaf975692a420c65a3987297ed5abab5cd628dfa6d5500668238669f1d8d5f87d3f6a7d06b88dfc61df1efcc6229ea9c30da0896da75025b24d7f784e1e2b87c0fba505b0b777ccd543082c1b298c1938f5161ad0dfdc548fbf9d3883ec3b85dc8ebb43a465387f40c9a426bcc1c79e4501ca9662ded3d7e7f7ec28f612d3ce8837d600ba2d58782ff85cdb05e6b785be3ea270a92d59a769c09569e76b86ef11925e35d0ef9a0f0a5c79c3bfd84cb62979b30a6e231902756378f4a3161ee29924335bfc8a60f600eefc7f134dbd6b0154c21fb8bffe0b396d100ee7e575df0dcfcc9d356e47c211ea47ebd91128ae20a7537a3056764e006a8c8c1cb386dead036bfc599f65258976246c7cdfeb3a2e02fd5bbbfb5103db67f11fa6fa1a9e1b86630817ba6c06f978893d4d42c82bf2d6a9f807adbdd14bf2f9da0d102a2135d1e4c77d0581181872cb91d6f4775d43a2459a5ac3388231323df1d0b1d0ca61d158f96c90c18a44738e329a189a36bfc95acfca0e58da8ff79a41944e7e8c9e71fb583aa2e205ca91cb87658bbf929e18c56cdbd3724eb455715dab251ebbd077540c87c3c31ed2427cee472fdc28464b4c3081461e2682cb6a4eed9e96a9e6fe3b41408c19a9b3faab8f9c2396523875582fded03a2cc79ef35147ba821a139b4ec55aaad908e347d28e6807d43b1a978f94bdd72a35d03a54989e9fe5531d6fd69842fd278f50634dee536211bc611b5531b26e1c28166cd3ceba5b311dfc3785a644b1cff8c0a7124e8c6cd7dd055515dc8aa0737ad0e9648559d237c8ae9d17ffd134b010d30aa43d02da033a22ffddd56a8a468f9059b949e34a2cc7d6e503e5576c80cd2032f1e69fbe2028945efb96b2d0911a95518c38e868a4e9e987df0b896da98739c983ed9c8d1d456342e435a0d4d8e126cbda183d4f9569b891b97111633ea851385c4d7e45890b57711ac011b16c6922d4323a2eaaa36a5a2cfb7ec1278b31abeaa256c915519723ca2d10c559cf1f4bdca0c517eca11a1786aca5c8da3d4924c3eca58c18045e03b90441f517567d3612dbbb4efde0625f2bdd11b5a4b6ac8992449378fd04ffe8ecdfd68dde181b8966afb06943875645341eb6615f656b9a0c47a95e2a920f615966fce7c490f6801b6ce739ca452a535b9a66c2ed6f262781f6ce8d14bb160bf5992040b78d66d52f7c4cacc3a27b428dc81189057da0e83fd350dac195f559eccf84b272ec652b16ceb8b135ffe57055fd8eb14329d0b972eee2f960cf7f5469f02dfc58526036c226e41442e315e35c9dd6edb6654fffd76a66d868529727d8b75187e2afd277eccaa5836e84c04acc35077640f0b7a3899ec5451c939bd35b0dcaedf74746a1e1aecc1b7c71eb37fbb8285f85f121a55cb655c57db885d6802b301ab842b1efd2added2db45ee109ec8b778825399298e077e1adabf89f1888376d3e5c92c2b0117480d527af1aad91890adc8ec9ca9d2e2d9123c022c345ecfc2bcd35442ae5a7b8bee8b38f4a6a3fdc1b956d697592405e85f6aefb3187e37588471b88766ba6f3dcecf9dc404c34f94ebd0931228acd1868e0be93cbd3233e8ac04dac5262c8e1a9137db9b51cefbd60d0ded1a213f7958cc0c85d08000b48ca0285391db0eb0596edbb78761dc0157f3ccd3422a7cab39a029adf48bbf1b094c3d9c83e507437f9a063da78ec6ed256c9a91af7872d538f0e4965b6135707fa6f2e8d94a51fd90176387033d32965261ef0813de2f35f78c09372f8672b01cc7982c82070e36dc2d817ee1b1d78eeb53682642fcb635fa94c4cb0df48b37ff7561c9683219ef966a396d2d14c3870fa4ff3e39b46f6d5ed48e987ee00d47af82b614216503708e6b991020ebf183b93e8716b0e8df61859e8588e84157d551b694aecda92400c5092dfa3188e8dd43d206843e24f18e612c26bbd6d20d5524a5d5534b87620be1dfcb6fd42cd5f59b2bfda056c21898fed5a0e4dbae93195dbcd330978d440a517393d64c40df0daf14f2548a46029887a2e3edf90da8104ff96b8d3e0dc015d63aa030ea0e42434de7fe5ad78b2ad6bb4c278dc5b4d41e1ac39b72548bf35f9a5a2dc9c167749065bc9e965bb4ad2619cd4c1fa47b4893c82ae04e88b1d89e7d2eb49283ed90ac2fb88b1ee780a0824c45f423b0a376fe29944f37c716d8eb98a41a424ff42f0620e4d18ab2482f57ec1f9d04c488138629a05113c3e6786e7ba30df5f3da5d3ad0a10ca164dca6a240f0e409c695e2c6189e77f5aea548be88ae242ce349482c6f249aa481a3e6bf652084c01bb17a28bdd1b19707d008bf3a81f249a837f206b7eb782fbd4ba09d7a9752faba5aa8f7c0e41db52d1b5e8487d587f9f4a324a0fb3d6d0206891ed904033a6fe311fcd4a7d2e6c1ae76f9e1e475d2af3e4209427fd20a7900177b49c0b99a0b43c0894362b7324f43712fbf8bce5fb7cf37f3282c5c779ec0da336115fe2158592df8411db7ec13885aaeef050d451a2e11ff2144a74e4a0d8944e84e3e48c4cc0c030f606914d849ea1570fb119d098c796fa19b2b40bf0d1f4987589d4143ec6f21f6ce75d2180bdfd472ab0caaa28f49dd421c7fbcec1f29c5261eb4129a440b51bc296e9a33de5d6b0628ddc1bdfbf0c76e2ba3fc20ceb8393e14637946116ea41f8fbcd2969f47a8326540e3a77b56eabc6877673b39dd36082c20450f589f1489ab41464d292d0dc579f2b569055d1457e75bc6ce1e905ba51fb03f5d77444fd7a78ddfd6746cf1952b32b693381ae9f81616715e6ac936c9a523c5ed0d4a9ff3247ca16bbf677a0cf711ffa942ea012d10f94258c642e7c7bbb41e2879f146df8f9fae7e5be45aa6af493c909fa9dc1ab34d878c704b7b29f220a7531c4d999eb6c2d9b1e51680fb3fc3a7f0e80b9d8ebc726060355088566160701d1862ceb9a7a60ff3b793e7ef020876a043e4a8645baba6b7e29fda75c9264f8481bdef8a5a97c5fccbcaa0a240c2f732766a87f5085f53837d86d8bcf23adec87283738fa6d4322110b6d39c4e4138b7cbab3b195c2e6fada24102229f095b667292b3bfb6b6282d46047625b67bd098793744b9a68382b9c97d431105ffc6ce9f7aa04923291811c6ffd5843b9edefdd7c04101bfc3d0d952267eeb7e8b885135e677e9fdb2886a43d73d9828edb5b4ee7c0e0760cd6a8032f2886e8d567a2e6b55b9c9903f0f235c239617ab325ec1829911fef75832d178ed0756e41f184331ee541f953d155ae57b003b512544b36202228385d357b235a41ce800f50ed071f1ff3c14062b01c6033e89a913572e3f0ba1851113ac2914739ece759230d2154d3d5a305c23e6244a720a916c8d4d0af5ea8ffd9ff433c36cbfb1c45ffe0f8cc3904eae10cd3d82957de0e295da778c6a95daa3d7f2900d034e85c8760aadfa2027b549041435dcdde82cab19ce173adc0eca36bf51b3f6120c7f42e6741c4289789d4142485383ee551fab4bbf60c337faf10321291a13c904d046b9a338f8797b36eb973ddd2abb9ec14695142f51b8ef911bab94fd677093c18be81e5a4061d3fd5a50855afca90f9787eb0039e4f42ca79320154026596124f280214084921be296d0dd9434b7084ac17083e70cf5bd47eef5bff4b25bef37d5093af13c618cbb3fc0ef50c3e2cc3c0d333bfc4c80339eb457b8320ce3debe4534c29b36f1a7cec8810938cb83aa446aba75603d6e015ffb32d46f499747386192c52174ef190f6c2947bd4171aa2cf7c5b5293a1d4a185101e46a264fcea995b897a82b2dcdf08b2c578b0da1430c1853d75c0ffb78d3dbcd973009911e36c6a539772c4d251af35f4a17cfa46014edf142931330e9a62b9c4496101fe2d8ec02ea28d3a2a8c65b480ee54b9ce9cb71609cb586638cf5be596ed351f8c8f9707a3e29a78d51474aa80895fadbb3c784abfd70fe32fffb762b4f64aa4b7fa3fd49f01d3c0291ad908240660d50fbf9483e4589b9f9ff65471dd719651b9b558f8f50f7d49858f611676f0392d406c6b02f939159e4582649a8ea0153319ea09d6df097e8890698452e20b24be244556f11c1f4400f7cb0de61db11dda2b632a4eceece49b38d4c227fd5271dfae09ea736ead8639f26b1aa57d3dc9f2188d2af0dce9f6a3e93c6858bb2d8449b869966c3337aef6aeab0b1889626f41450b6504b4e132c673f04671f413818990cd651249b5598ced7cb2c81ee89511435df02094e945fcfbeb765867a0cc6b8043871a4e1301770f859560af0b6f15b07d7b149be18b24098d70db90e86e3441d3426c7d692ca91e4c16b9b7c973ff2142f460ee426b1beb59b36a643654bd6d8ca5f1352303b066a192e0ee7dde808769bbef7cbb0ad5856a794be9c2325d8d3ebea5deae8f531d8a933e3f71f684efd9b2ebc54bae716a91ee8efaaf2ec87977d0212bf0f44cab45cecc786ba2962db119b8049c951d3b12ed5e54a03347a497f9308b4accceb4cd4067f75a1c12ec898ab48cfb8e7692ca32c7ca5a7c114762478cae207679765f89f4df0f1489cfdacdce92d06f91b9c6240bac0a1c1916fe86416c9e92c4b2468e3a0f7e0cadbc2e82ff83955e2020d559f155436c94aefe89118d6393f69adffbd877f178799613fb986cf5212c35a5ee5c6e600376e41cfdef597d27b0fb7b894a4d66d2e6492a0035661ba26da3c32bfa5211ee710316498c9ab0f572ff31f35bf6280cee039851cd4080df5789eb310034cf3471d2e1d1fde8ac93c7264f0b7e90a2dd5adfc0345fbff4b2f26c64bf5115a66f30e93761fe3ca7276ee05578e0320c1f498989a21334380acb87ebc67025d7642026e2e13489969ae15ee9121d8ba8b3cf8612ee3d882c29c5b840a613be0a9640e8a37bc5314868dbb5b46cfa2faa5e7581d244d9293b08e14174d5d430b5600ec6f059df8a32c56fdab3ccbaeb6b27cdf45f13471e6314eafc360b178e0424113c8fd3f1ae62e9aa49bad317b9ca1772bf9544e385d53d9e679510c082a273f1b95e6b773b5f798692148fe6631bdf2e5eaa977d6b66d8ae15b58c48fd03b0f1cb84493910b34809443a624ee7b9e5c84f24a6e4e2556a5870cce26a617f140300093fad1ae03c4a51188fd65668708d896504df28c975b439c4ff71d69fd97e622764ff8e35e9f5d9beb900113ef7fc30448e4f5fed16573847a13e000ab21d79861c329e7fe3cfbc45d7a07edfd0df6de032b39891a4e3b4a64c8b818c3ebbce9d766acae331a065f1fc09e66efd27b934ca64343d295c9efcd0e4057ca38bd68cf356645e306c3fa0f1519c97c7fad88ed82ceae0d8e0a8f4f808ff339348bbd8a68ab52710646431dc33e6876fa9fe908729fb4dc4ab6b2252b997f55f556d60238a32d8eff98f5fa7896cf00802c2175aa5cbebe9224ce279f5978cc0a33140fcb9e79b06176571e2c2ebf04f3298e12f28ebe6db880165c289e886b4bad15452cd76e07b32b09db6dcfbd224567703fe7d5361681e627236f0b99efd6dc262e35d0d61dd9c577d068180575259cc858f5ee6b3e9ce631e9be70fbfd78bfcdbe6549de5e56cdcd6191a7948080499a0b5e0da9832f291c4c64c0b5bbe80c204311d4fb40d88232d07574eff4fcd5c304fc6872830db356829ab7bdac0b2db4d5183696dafae5cff9e378dbc34fe0a6f64f465fc115420a78b3da8e48e741382b6a761af9fab522ad348b3f018716881bad38fdec024422ec6638729f4c027c7b8b577492f94a7c4f1845b4f5b37ec7732e3356284f2c6da01973c68e56b35b0b1fa730d07afceb200869de344e5e1a28b114f12f3245ce228c364f2c26dc838f559ade4f38803ace7931666de08d4c66c57bc7061f6bbe48acbc903f4e7187a89b56e5e06e6c983ffa7d028796c8fe6d30c6c3949549b807a6a0bae3ab78eabbbdc081624e49de13dc83e115180cfc134346fcbdc81741a6dc038212e1f036294fa941607baf267e294b438c9a8e339d00346d6e6bb4bac972fcca6cd27a5a8ef9c5fc3357af181d65fd09c490976fb399e34ea8a016dde41b0d18bd306ca9ee309488d0e38500e75909397b22d0f6835fdd8021e083b72a994d9a59a306b471a8fa997afa64a075d0d5e69610abb8881fc6c7a412a6fd4fc577be95fcff72d09bb651ba0760d3a3b02465a8bb06d9d1333e6c9028062770fd37c149c1f20cefba8bff674de771e06fd6f166b2491a7e25922e35d5ded2e1f45912568eb4a0b4fb9ff6fcf7a89e066ddbea3293c307b3342eec93a1e9e89912e75821ae11671d6baf67b4c7abe78f1ba5e2310b4c1f4a64d16e076724ae89a8aeb5e97fb6db84b1674ee8e16e12de9841a8b7a6ef061eb15e6d3faff436398c9bbcc210a23a3ae046a561ebb7d147d816e6e76d5e0857920997bcf9e026e21c6abe7621db638516d62069ead1b3730d5fe670d826064f27bf4657a95edb6944dc0d5d1515758f750b0267ce752b4a9a8b94cfe311cce7ce573d358024ed22832f424466e5b671b9a219474200d0368cd1b6f0706ee040e134cdaef8014de4b417ef636bcbf41d590c4af770c1d4c77b69822eee835769bfff8ff9dc2b3db2753c0f9018edfbfd884363a50ebd482194db18f05174635190863363dbbb8311aec3f4880e8c5601cff5f552b3ecc89d67a88c9ad4d25d36bef479cc2945465e5ff4c2549ebd1612b04378ee578990238bc67aa00e41b211ce00f670681a649e31a8a2508b90ff45fede20b651ec9c08df5e3538181e94cd425a66005df6dd223622816b0e54cac46b01623372ebeeb96703a0b38695d050081a609b65ede53ccdbe66754099eb859ab9a6c27216f38d4f97778d592ec8ab2149358523f1312404173a244671954a608f7a6e3cdadb796af7dc22b8bdb0b24a82c2d4388d788311879f64c17c738d24c43b0cc8c1d31b99f713181f72afbd4ffa8155538907bfd395915c458a8cfb690f09560f95a1117ab0606a18eb7e5ed0464a4bcfc831ccccc123e4b02fa02de9f9a253c195ca4da4905cb3f1e8c67a020325a661746e2440ee7c0e86f963d3fd57b6e4abccd38773890f49027c2505a75dc3b9cb15ff78080092416e20f25a276def75463a6886c5296ca709b50c384f8ac7b226b0f3d5827599a587c324830dfb06700663448a6f868c33e579a423f7fb7cf2f83951dbfcedf78e20b29bf5d761396315a819a1d71a241149f745ed9ce19c99de2304e3184435e32c5536460245344e5b0d59cc69c27579efb4a14ce4382477f48a0634cf64ff3ace972b706ef21e7ac91e36dceadfcfdf66d871de3cf3ca4cbd86638bae3d54510ca55bdbc309d57dd7e850fda5cb7aa72694f697fd0aa94dbd4e6d5aa3726f4f37897b7fbca75ba3dd588d1f94b95c3280c3cf0521d8cd3437fecdc828fd79add04431b7029e43ac43cc6da8580d75d6ee961cc249fd70ac18a77f990641fd8143ec8289b1a7acee0ec0368e420a2b6ec9e12b00e2b51b69eae72c915a6d0d8abff3750b0f9f6dd9fd06f77c6df3641a193bc28820554df42b6ea8d9f176ab2a6ebd7cc80d8e116369b30ff090b47dc2e16e55cdf7a871dcb0113ab180fea2cd0c37622abe177118e192f6486647181aba662840ad68ce7a659b37af2b3bf76daa62ca8f870f1444b12849883ed5e712f43935ed37be0f682212cad550b26696198717c189a330abee4bee5c0f2d1f7e97f80f803ef8ef9fef8afbac8b3dfd55c087dc6a50e12701683ddb9a406314f890ccff4365f0d4029a8df682f6fca48e28367c09292313455de89d2af8f06a8032ad1529c230bba41eceaff8450b416e998a89597a9d69552b7fd0fc00f6ff126620dd88c58228539db6010a6e0c43c7dab60e71c10a65f3c7f937cd9e2ce00a9399fafc31a20b29d451cc7bd1168a3e0f00bea4ae4f88fe110a5df31c430b689a737a27448fd1f69c0c4cff49b2a27b8291aa3dd0e4d15b6ef40397e0e2a59b404575837420a0f649a00d9cfcbc373105e53bf69e704e698ce744fa26d68be74645429f9c398a8a3245268e5abeda7e4f5f465574b3c43c1436c36959cd5264e0410baa1b254fd162dbfab2a4343279e1fb34bb4096dee00c42f2d1070d152b817fb0f394abef9e1f93779fc4aced0211b3b26d2083d72becf17ded0d81a7e84b039b2f5fb6e112c9daf9bb1cb18414b65a83aff85bfb2adb78672a4100b7d8114b3000304cfc6f64b9dfad2f417fabea09eb02524e13a3407b6e0445d6b39f99ffc9e71e91a00664d3676407256b535f37104f801db1eb6b5415ae28eb19bf4f4aeb58d0ade8bc77ad3d82b297699eed1bb803cbf71e81b7d40090274831d1ce181e472305f36e3b58373540371eeb0b34987de86e27ae30d96c5b25ed760a87fa28b2f0ea8b051617ef2e5124325639e24ce90a30d99923db315358bd9a43dd328dae72392093eff75b35b31cf0364e6b68c0588bb9de7b2507140ab07fd61994d996f1991cd8b7c28ffb169be52123202f3f70179d225e06ce970914320ab77369c04a5f8e1b65b23eb88e42c3209f4f795893cfef90711afd508eeb8f8a6b1e72f9fdb795fa62b377bc5c73951071fc4fdf3f8944e0c363c7b493fb9f5c693ff086d3d67d4200d81e5fa71d7f444e0edc938b1deb3e5e306d1201eb4cc1a88c7a174820f9fb3a2743b43bd3af39ef324e142a7414fe8154e69dc33c0cfad276fdff501057ba64293592714c289c0658506f42ed198e2cd41b9ee2cf71b8440a16c3a8ca7c18392b0fbe6a2ddc0d78d03e401d8f6ef10f1e8ed7f635a446b70052f6ca2980de00251fe1501a9ecabc3247d32514b6dce3369295f3f587836deceb226948496624defbe8def2e5d82c1c267455d8eb106390ebc4bd4d7f65e514514446f5be32047c8293fe8ff4c7fb9be0220e46de73589642bcaff1658db8a6a1e35d5e1125bd0f6813d965462a2f61a59373b8cacee861db1fce3a12e6a995c109b731d8c415be8c54e78f7149428e7b5ceaa4cdd608f5a95f97babdb73e436d69f0837be781799cb48a85151b731f86399958b2130bcbb4ccd225c137666c979fcc92ddda22514d69051e164464d715fcb0d1f2004d0f0d60d1121fac652408ead0f126173218b034cdaa764a06fb71e4dfd84da28c949920bf645f9bb5808c6f9e639807fbdc5f8dd6887060d2c9b34e6925f4d18636eee2bb5aec681aadff943d9712fd6c19909846d1bd5ea875654a7d8d246a25a722d8d1bf9c038e551b0b3a4d24fd287f453bc1f44579a47fa67e1ecd26927c12d0075356fd475bd168853615d51b5d8c9cbb9cc8de5a61648ff6d8644e462c8f81cc3b859f692c9c0560c1aeee1d23aed5eb91ba9c4b1b7592ee15179b46974d2194647bf6bd1daad6719f9c2c4ed645ae0a07a119c13e3551a23fc1c168d54688e44a14300834608ef22fb4caaee88078fe312233173c55f99a9615674def4657d44959092e81b020aeaad64d41d42a2edbaa943ff058f188963b56a9afe085a7f2df9b171e9fa1ed2ac701a9986b1b0f792e8a4e7f9539d234c9a6d370fc1c3ceebe89f97c6d8b90584f8b7cb0cae018b1aae7277b9f0a495c655bd2fe48a8978d319a0398864e0c640c7938c2432364864c2cbec961548e66eb3431c6d625d0128e6795626debe7840ca92ffbeb99076ed478d7818f3a70586d1eb7b73777912a200fe8b361cafc42c18f7faec9bd27c6d0fe240261c5fcabf94528605d027b92467007b15e40643de328cd4c0f5d7c341e897a21c44d31e20e5c5aac6aa8b87d8656292ab8a9b3d90ca3514ce1cbb1c9214fcef28ad123ebd3afea7e98af8d9bcfa767001c97abe8669a62fccff7e38904a677bd249d6932e8e229248e0dc335d97cf622515266f2675cc5cc3bbdfe46bde6b565b32d74f114d374d2fc761cd4fbd75f860a9c8ad2d7024c33ed0777feab27fb655752973c7793662cdec0ed78aa3a8b363091ad24320ade94aaf5ab1478fa6f4f7e8f8708c1f181da4b560d6de8665cdc35eb63de18d8b737d091d6eb2167d3d1da7407ed0dfd6617b2a3694a903b650fb27f2f478c019b3c05f03fdbd6673706a90f83d924f1dbe48731a73a39ff455ed23d853897cdab39734d1452e463eb03ebbf8e795363bb2035a83f1b2ed25be86ada18bb8a2afcb6a51fdc5b016bd6ec5e1baf6d946640c8401726414f67581419edc6314fde3d08891b82eb0860aba23e61c13af8d3dd104d14e2995c16709f06e79a04f607f270393d4e691e7b5fc53713566ed6d865681d9e5fc13fe009b1cee3a2c28f4f96b8c5cfc60fb2fa5ae9296f27e582f116f40830aa7a80c1b3b84e902a44c4a3bad60895c59f46394927410950dca8ff3f2586ca495fa69966a251d940196e6e8eb74135a288a16ea2ef044b1597abdffda25b28f09f9104c647641ae4bdef381ab226f157615f4f891156bd037df37d3a53fa584b8048b0f1bc561a5de30be535c6081336b8dc3d8dfd28019c290b36fb2fa8e4655686386eb8c3dba87c47f0c9b9101aaa8ce774c831517b1a937cb8265f991cebb2af26f04f7b2f7132c56c38211a8188927826794e4af7c0934af37e68a9477d4a599320c416f75d57a3ffad75d90b82f7458890b036daf46b783a75e5afa1eb8bc17ca645880c98bc3a685815bdae78a40542b4684f033f103febd610c9220f9570364769ac44c0b0effeec7edb9a4f8955bb55335791eda128a369d17a1bcf9b1f36e8461bc0ec08772e00958693d1f1e5607dc9d69a653d1ffa49429a8ed3b3afcfe14f7aab05fc4f82c1dadb1fa32f7bca9e9af136f6c4803727635805c1af4e5f497157666098fe90551979bc79520bf3be9555123880739e3998c1e8de0eb91ff81a280b9b1b80560d6cfacb84b7eb2ac4c136ae3ce3e2c1dd367cfecc3910d961d9606527e95252097e2c9e0ac6b586957912fae69c7296a55d84d752d4eea2c7f40e7e9e7f162b3bfa33f01fd7bcfa31dea18bbbcfedc5306746fca872699b11ac9c99128fe224b814f63697def3719b960acb29b201975421cffac9125d48a075494ef3f79caae2b865afc77c468aa5c5fd9192a4e88c540f8e63aeeb119751c8a2e9dc1329cebc00c821cdda53f09ffc4c1fd50d13a9c3b1ac6ac152aae27e7f4e03f16b63a0b80a122acff2d2ffd6b45bdd8afbd62c0f8be624f30e7993a6d9d6b82284565488b9c7a9ba9bb1402cd34e73f339373d4ba290e2e2a0986487b6804ec33235e8dbbf2dc257088ec5f65f224d87b42567e75604d8354008653d830b71afb7726fcdeb2eff2a3b7d69d8fc0988bcfcb5c9fa6185ed3b067907543023db63fe0d0699e1eb21658de0dc71fea9d32a1e3c2f424a55662f78dbd1088aa48a75147136970f562520ee95f689d13deadd1ae3172f8d3cfb1f518d3e2fa0d1164c5afad27b03c4e2eba8b14df54f20c06ad713bfd010d6966fccc0dd6edb97295375d876bfd2d420babaa16c3fd12ec8b7d9c344cffa5fe174e8c6f226db6fa4cb4ff58a0a5c644bf9deeb60ce4c1a2c0b4004fa432f3c73297981d2cb3746eee797438e6b1f2d462fc24a79b32c5d1df6eb27103898cbbb9926d895267386901760684d44046ad71353122413a749940807caf099b1ae128b23979bb384a2920efb2860ff3655aca47c46040654a73c95b694e672d3bedc0d201d36ff7e7596d24c9482d779eb0aa77e116f65285a09bec9af6afe7362cf325af40b88400de629b38eda327fae8a4aaba8319d614d1ce5e944d713c8ae22fbc237baff0f33200bea3109779a939e5a69b641f400247b5d2c7099cadffa2f423e9a8b2034ae159fa3c00dd7aada6322715e8d1f5a29a627eae666dc6658d39b4d20f6aab37975d1f344a515b44c61a8cf3fb05c5d6ee5a103c1fbd073a766d659896b268e2b01d0c7b10e8efc3583fe2722eca8484732efad86f43181368cd5e5663a8a0675af7b914b4ac5ae46da4f92d7ffe1812d22ba8bdec663f61e5a001bfa8293a8d05799b016fd4853b4e8ba18f016db8acabe99f9b8bead7c62c7a8bfa2cb977d86d552691c1f4c58cffa40f4c7832b031cf4fbdea0d900cc7f708245c2b45079cfcf1d93f253ead196f8e39932486c6a29546dcbcdac3ec9bd59e228c2b089695023bda24a2a94cbf140e1b41186e1adb5e25781ea94131092a886de0ece04dae2ec9b301361d390d927d6a9dda2bba2260570751a972cf996dfd11cc60a3c944e9419ade2ee54305d872d1313332629ec9c0bfbb63dc311ae29db9dd5df9dd9cec167ed6704250c9663dea1f0cb08e272b8eac645748f50725757fd5024a97a409779b3d791779f0db62fafb984dcb94d5ec523374083f914b2e18ba13262fe84d0d5062a611eb0069a232110f5fd8db199240a777edcc294eab7438a1ba377dc0ade26375a691289bef280927c7d31a1316b84dafc6ff057be735c02eeb09a65ccf3d78d05a3246b32b08242a6c28fcc063a6318a959b5fadd2a054ae7803066b9414df4bca4470b7037cd2d43deaa108ff6f898a8e152fcd5b3a0a711a8d9868d839d5076ac7c3472fdbad66f76bf96620ad710954de58009f7d4fb30ebd43ce7247f1dc3d7e072244162386d35cb50d298bd14314d8aea055f140330d32d2799ff7b9cfc99dcd1a404bbe218cc8327f66989fe22c94dbefc4aac726688ce240874664db336a7f3e2254527d1d1564694498f49b2a32a9c1f0cef321f1c7609e1d6a3b96f80517ec2d266e6dbb7a4c2c8b0424de60990f754b6a76d6d46a8c5f8b633ad667390098cbaf72fb86983761df4feeabc9debbc3a25ac7cbf6249116bd759c0869e84f97dbddc27b826f7bc9beb680088c4e94c30106c1d8f7c0f3ec4eafb0ab6aa235a3305c48f0b810d7beba05c921360a0e6b37a6192ccac67aa6c6d8d66494cbe171e0509bf39da34babf41528daafc5974bc0af93cea025df85713141fb14d74808f145ae96863fd6f69a57cdb8003010512ecab4af53757748fe6d9bc303e730d78c9fef46d003d30f306ee6f7f50a94859d1e672d5f739df7dd7263048410479abb3dc57df25b889d1dfe887d2790190a1703f47f5fa8573f349c6c6e52d69b8f8db0536142495fbc73c2a678cd76ef283c43e438c87dd2eb4b94f7d34fcb1d796d9e331b5aadbb53cbf779e8e390bbbe1dd8f280f58d2a5bdfc453560f16a0cd462deecb3aa6d8d930d799ec1d47c47f319473aae8b2c707dfa74545f15be510605eb72463773536e4a3ac09b8f47f630f47933c2e9405ff1c8a7d7e2064b6a71cae560d45b725d02d543db7d2069673d7852177efb42cf311841002d2abecb83afc5948142a4bcc27c32842c19e7e6ccba7e90c07151b24365bd7a5fe6f67694503f37ccfa0dbc2dcf53227e6c58b0c8689441e7dc705abf3bdbb6c707b5d9bd7dca0bd24859b7b6ab77d8dd0e88db1d6fa721c2ef77fac1e8a167719c4b7a772fcdcf9e5265d0e8e90df5109787c640ba29dbf01e1f0c7743d575884dfad4befaf1edf59930e1515116a8f1eaabd281fcce27e080d774f62dbd44bd0bbbcd3bcc7ce870f91eff5cc517176a508b094e444a8c71abee3c4c4f9cc6adc28745a1b9960262a008a6196eeda9132b4478a044931cc796014f6796e055089f4e5dd678d08a333795b1cd2cc955f534dc530a094ba3a53ec4ad8ee496446477a62ac627b490f2713595ea02a1f3540e2745eb2ac98cf8e60c97b30013818e3ad71019eb3d57bf4ccbc2f7ddfc50dbcfe275797eed5ab60dc8668b20a9c5083bb3ca1f61fb1a80ff40858e095315721a415fbb4c60fad110c65803f998f5e4f8c9caa84ae08e55d066bd2c3ea32461e0c26372b1bc1fbf89a1183da12f2946e646dd4a3fb2562a91cecea6ba0adef551409b069d2463f76ceedec0451b093bb69ea855ef276d38908df85d0818582d8ea5b45aaf84ad6b9fb66d63714af274e5862cd954b25f0179b1042f4af5ee3ff3377b7798c25d6c0f305c077830833b91901952839983fdb1a03439f6ecab4cf8d69f49f13f5d40cdfd568c3498790d5e1069e9220547205ce5a34a71b0646cf77a3eab2c0f6ae1dda7ce78c1209f1af02dc480e8f8ce859ff755d15f17acee039c62a8c6b8f6a10414a79c731ea65b5d483856c45f3dbbd8ec12cae910d05e4913ea2dbecb0e847a59b6aec72e454c1fb8d92c829457c44ee138f2f5172cdcc36645a3fe6ad60b8f9316b4f13a8c14b7ab8db9f4f0e117840e9266fe3aae4764edcdf382675cad5010a1459dc40892ab45523d45dd2b315e780fa23b432793bdad58b5d24adcaf3d076a746de187981a1e71aade26af7920f39d20df2ddf34c2e6079d3d319303092a447738ee4186ddd28f497cd9a019aa4fa9c76ff9738aaef1e90008120ed6e3932d9e03769746c7faa7577127449d934ac7c9299f4b7def080e04016367a984033c89407675236d7ce5a90de43132bccc282acd4e19bdc7b07a11f9cdd73b7373d145558e70e40d6e67a284e6f4c21574a78748de6106d4a692e335fb60b2b5250e1ef27143f872a565339a51a56677795176654a825ddf6dbd7644ce44ecac46c831a0f2373992b4b1a027b337bd58c59f6a868abb4088b12f39be9f10ab55b9742d7a487ca503fe51095a27c6dcfbb315560c4f2fafede7379bfda042104efe99207c2e630f4ab3795d09b1bee31dbf1868a062e97d66aaa8db09c1376b4801372e866dfb4dcf2cd8bd252fe218b3f6febe0f4117b9d96dee88a5c34ab713431e5bcbbe6014878b21786f4a8cbf621505b9759bd73b096cbadfd99811cbd882a8f2522340e5001a62b8814a71dad9e5b40de14524cca0e7817e50181b23597fa629f05d9346e656ffc70dbba841ac2757a945d6b2b65b038478f64563623c94b193fb3374560762ad469b8dd98540d2b98da9566225c85d2822943203950c3127e91e4e31f1acfeecab492bbe17bcc24629238be495c041d5b0b8759abc069038e2435fcb35603e53eb993832a10200ac51f1e3de5b50d8e7839a5b043e179b1eac376cd9888cda523ee2ff6a8949622293bef24ac33a29507fc9cb6643ccdf3b887037eb333ebd34c3fff5dfe98aac5c8e61707ae6954d10b658e670d0b11b9339be411872642dfb6a1edc2055cfa8a8b28d4a2199c76e0efae8799a795a1ca72f704fbf6bae6032ef145129ba317c1e2cd64dcdc5957652cbe566b0d96154bfff78f9f6bfb28e090251598c28ea6f2d92ec9f6a900b37a33b3c50a935cd900201348ae97a30b9216e556161339541fd700562bf148535503f80e3c438cea9c253cb3080079729a78881c4bbb9135463e4ce3fcacc9bfec2ccf0e346ec40f5373fe4c7b8742ebcd1cda0759f04777fe80d6626e14fcd4551cba35b4c4f41dbffc8d293ce1d41ca9ece5d8d67122e237d2ce147b29262d920264d8e79e15296bd81a810b52342c5a07544ddbee1609dcc910c10876d9558e181305c75465f7ce26449e35a409abad0accdb9f644898199a4d5466374175972b90428fe4ce4db9f50f52010a5fe2af657a705273e2ad70c0bd755a173622b4432ef1850a82155a6762df244f05387234369b5ec204ff30919e447f33e5e57524f489219eeed635522619f7ca56f0abeaf1e60afd4fb425d6ca0","isRememberEnabled":true,"rememberDurationInDays":0,"staticryptSaltUniqueVariableName":"a6070eb0f4a93d1893ffd24d002c76ec"};

            // you can edit these values to customize some of the behavior of StatiCrypt
            const templateConfig = {
                rememberExpirationKey: "staticrypt_expiration",
                rememberPassphraseKey: "staticrypt_passphrase",
                replaceHtmlCallback: null,
                clearLocalStorageCallback: null,
            };

            // init the staticrypt engine
            const staticrypt = staticryptInitiator.init(staticryptConfig, templateConfig);

            // try to automatically decrypt on load if there is a saved password
            window.onload = async function () {
                const { isSuccessful } = await staticrypt.handleDecryptOnLoad();

                // if we didn't decrypt anything on load, show the password prompt. Otherwise the content has already been
                // replaced, no need to do anything
                if (!isSuccessful) {
                    // hide loading screen
                    document.getElementById("staticrypt_loading").classList.add("hidden");
                    document.getElementById("staticrypt_content").classList.remove("hidden");
                    document.getElementById("staticrypt-password").focus();

                    // show the remember me checkbox
                    if (isRememberEnabled) {
                        document.getElementById("staticrypt-remember-label").classList.remove("hidden");
                    }
                }
            };

            // handle password form submission
            document.getElementById("staticrypt-form").addEventListener("submit", async function (e) {
                e.preventDefault();

                const password = document.getElementById("staticrypt-password").value,
                    isRememberChecked = document.getElementById("staticrypt-remember").checked;

                const { isSuccessful } = await staticrypt.handleDecryptionOfPage(password, isRememberChecked);

                if (!isSuccessful) {
                    alert(templateError);
                }
            });
        </script>
    </body>
</html>
